decision:
  en: "You wake up in the future where quantum computing has become a commonly used tool in science and technology."
prompt:
  en: "You wake up in the future where quantum computing has become a commonly used tool in science and technology. Interact with people in this new world and complete quests to learn how it works."
scenery:
  mardiDesk:
    spawn: { x: 361, y: 553 }
  coffeeTable:
    spawn: { x: 1327, y: 551 }
  libraryDesk:
    spawn: { x: 1902, y: 547 }
npcs:
  mayor:
    name:
      en: "Computer Center Technician"
    spawn: { x: 819, y: 448 }
    dialogue:
    - type: sequence
      items:
        - text:
            en: "type type type"
  robot:
    name:
      en: "Barista"
    spawn: { x: 1079, y: 551 }
    dialogue:
      - type: random
        items:
          - text:
              en: "I love working here because I'm surrounded by my favorite snacks all day."
          - text:
              en: "croissaint croissaint croissaint"
          - text:
              en: "coffee coffee coffee"
  citizenBraid:
    name:
      en: "local student"
    spawn: { x: 311, y: 538 }
    dialogue:
      - text:
          en: "I'm passionate about quantum computing and want to fill my brain to the brim with knowledge!"
  citizenPunk:
    name:
      en: "Post-Office Clerk"
    spawn: { x: 1212, y: 333 }
    dialogue:
      - text:
          en: "I handle all the mail around here."
        set: [ 'op.love.2' ]
  citizenPuan:
    name:
      en: "Banker"
    spawn: { x: 1929, y: 530 }
    dialogue:
      - text:
          en: "You can trust me with your money."
  citizenBlue:
    name:
      en: "Mysterious Wise Person"
    type: citizenAqua
    spawn: { x: 435, y: 538 }
    dialogue:
      - text:
          en: "I am very wise in the ways of all things quantum."
  dogTan:
    name:
      en: "Emmy"
    spawn: { x: 549, y: 540 }
    dialogue:
      - text:
          en: "Woof!"
  lawyer:
    name:
      en: "Doorman"
    spawn: { x: 331, y: 333 }
    dialogue:
      - text:
          en: "I take care of this huuuge apartment building."
  coffeeMachine:
    type: invisible
    name:
      en: "PercoLaTeX 3000™"
    spawn: { x: 1229, y: 560 }
    dialogue:
      - type: first
        items:
          - text:
              en: "Let's integrate some coffee into your day!"
            responses:
              - text:
                  en: "Espresso"
                then: brew
              - text:
                  en: "Latte"
                then: brew
              - text:
                  en: "Cappuccino"
                then: brew
      - id: brew
        type: sequence
        items:
          - text:
              en: "Beep! Whirrrrrr..."
          - text:
              en: "Ssshhhhhhhh... drip, drip, drip."
  webBrowser:
    type: invisible
    name:
      en: "Web Browser"
    spawn: { x: 1547, y: 322 }
    dialogue:
      - text:
          en: "click clack"     
quests:
  simulation:
    npc: citizenBraid
    mood: interrogation
    available:
      dialogue:
        - type: sequence
          items:
            - text:
                en: "I'm trying to create a simulation of a superconducting material, but I added one extra atom, and my computer froze. Can you help me?"
              responses:
                - text:
                    en: "I'm allergic to computers, sorry."
                  thenText:
                    en: "Oh..."
                - text:
                    en: "Yes! I saw a computer center down the road."
                  thenText:
                    en: "Thank you!"
                  set: [ 'quest.simulation.active' ]
    stages:
      - cond: '^visit.computer.center & ^understood.grover.search & ^passed.gate.quiz & ^passed.circuit.quiz & ^passed.second.circuit.quiz'
        prompt:
          en: "Visit the computer center."
        target: mayor
        dialogues:
          mayor:
            - type: sequence
              items:
                - text:
                    en: "A frozen computer with just one extra atom? I've seen this before. You need a quantum computer to efficiently simulate a quantum system."
                - text:
                    en: "An extra atom in a classical computer simulation could add years to the run time, but only a second longer on a quantum computer."
                - text:
                    en: "It's pretty powerful stuff, exponential speedup. Do you want to try it out?"
                  responses:
                    - text:
                        en: "No, that sounds scary."
                      thenText:
                        en: "I understand, this stuff is intimidating. Come back later if you change your mind."
                    - text:
                        en: "Yes, I want to use the shiniest new tech you have."
                      thenText:
                        en: "Alright, but this is delicate stuff, if you want me to trust you with this tech, I need to know you know what you're working with."
                      set: ['visit.computer.center']
      - cond: 'visit.computer.center & ^learn.about.gates & ^passed.gate.quiz & ^passed.circuit.quiz & ^passed.second.circuit.quiz'
        prompt:
          en: "Learn about the basic building blocks of quantum computers."
        target: citizenBlue
        dialogues:
          citizenBlue:
            - type: sequence
              items:
                - text:
                    en: "You look lost, can I help?"
                  responses:
                    - text:
                        en: "Can you teach me a magic trick?"
                      thenText:
                        en: "I can do a handstand, does that help?"
                    - text:
                        en: "I want to know how a quantum computer differs from a classical one, like my laptop or cell phone."
                      then: classical-quiz  
            - id: classical-quiz  
              type: sequence
              items:
                - text:
                   en: "I can help you, if you first tell me how a classical computer works."
                  responses:
                    - text:
                        en: "It's made of billions of tiny switches that can be either off or on"
                      thenText: "True! So, information is recorded as sequences of 0's and 1's."
                      then: quantum-basic-explanation
                    - text:
                        en: "A tiny hamster runs on a wheel inside your laptop. The faster it spins, the faster your Google loads."
            - id: quantum-basic-explanation
              type: sequence
              items:
                - text:
                    en: "The basic building blocks of quantum computers, called 'qubits', can be set to 0 or 1, but can also exist in an in-between state, called 'superposition'."
                - text:
                    en: "In superposition, a qubit has some probability of being 1 or and some probability of being 0 when you measure it."
                - text:
                    en: "We can pass our qubits through operators called 'gates' to change this probability distribution."
                  set: [ 'learn.about.gates' ]
      - cond: 'visit.computer.center & learn.about.gates & ^passed.gate.quiz & ^passed.circuit.quiz & ^passed.second.circuit.quiz'
        prompt:
          en: "Prove your new knowledge to the computer technician."
        target: mayor
        dialogues:
          mayor:
            - type: sequence
              items:
                - text:
                    en: "So, pop-quiz, what does a quantum gate do?"
                  responses:
                    - text:
                        en: "Opens the door to great wonders."
                      thenText:
                        en: "True, and very poetic, but not the answer I'm looking for..."
                    - text:
                        en: "Changes the probability of a qubit measuring 0 or 1"
                      thenText:
                        en: "Nice! I have my lunch break now, but if you come back and tell me how to build a quantum circuit, I'll let you try this out."
                      set: [ 'passed.gate.quiz' ]
                    - text:
                        en: "Flips all your 0's to 1's"
                      thenText: "Close, but not quite!"
      - cond: 'visit.computer.center & learn.about.gates & passed.gate.quiz & ^passed.circuit.quiz & ^passed.second.circuit.quiz'
        prompt:
          en: "Learn how to build a quantum circuit."
        target: citizenBlue
        dialogues:
          citizenBlue:
            - type: sequence
              items:
                - text:
                    en: "Back again so soon! Eager to seek more knowledge?"
                  responses:
                    - text:
                        en: "No, I'm just taking a walk."
                      thenText:
                        en: "It's a beautiful day for a walk."
                    - text:
                        en: "Yes, how can I build a quantum circuit?"
                      thenText:
                        en: "Ah! We need to set up a series of gates to increase our chances of measuring a desired state. Let me tell you about two important gates, named X and H."
                      then: gate-explanation
            - id: gate-explanation
              type: sequence
              items:
                - text:
                    en: "The X gate, nicknamed the 'NOT' gate, flips our probabilities. So, if we had a qubit (or unfair coin) with 25% probability of measuring 0, and 75% probability of measuring 1, those would swap."
                - text:
                    en: "The H gate, named after Jacques Hadamard, creates a superposition state out of a 0 or a 1. And, fun fact, two H gates cancel out, bringing you back to the state you started with."
                - text:
                    en: "So, let's play a game. This coin in my hand is tails up. I'll give it to you if it lands on heads. Which gate do you want me to throw it through?"
                  responses:
                    - text:
                        en: "The NOT gate, of course!"
                      thenText: "Nice, simple and clear."
                      then: next-gate
                    - text:
                        en: "Throw it away, I don't need it."
                      thenText: "Alright, more coins for me then."
                    - text:
                        en: "The Hadamard gate sounds like it could help me out."
                      thenText: "Certainly, but in this case, I think the NOT gate is your best bet."
            - id: next-gate
              type: sequence
              items:
                - text:
                    en: "Let's try a harder question now. The coin in my hand is heads up. I'll give it to you if it lands on heads."
                - text:
                    en: "But this time, I already threw it through the Hadamard gate, so it's spinning in superposition, not 0, not 1."
                - text:
                    en: "Which gate do you want to throw it through?"
                  responses:
                    - text:
                        en: "I'll stick with the NOT gate, that worked last time."
                      thenText: "I don't think the NOT gate will help you out here."
                    - text:
                        en: "The Hadamard gate, for sure."
                      thenText: "Nice, it's back to it's initial state, heads! I think you've got the hang of gates now."
                      # set: [ 'passed.circuit.quiz' ]
                      set: ['quest.simulation.done']
                    - text:
                        en: "uhhhh I ate the coin..."
                      thenText: "uhhh spit it out?"
      # - cond: 'visit.computer.center & learn.about.gates & passed.gate.quiz & passed.circuit.quiz & ^passed.second.circuit.quiz'
      #   prompt:
      #     en: "Return to computer technician with new quantum circuit knowledge."
      #   target: mayor
      #   dialogues:
      #     mayor:
      #       - type: sequence
      #         items:
      #           - text:
      #               en: "So, you're feeling ready to handle a quantum computer?"
      #           - text:
      #               en: "Can you tell me, if I start with a tails up coin (or a qubit in state 0), and hit it with HHX, what will I get?"
      #             responses:
      #               - text:
      #                   en: "10€"
      #                 thenText:
      #                   en: "I'm not giving you 10€."
      #               - text:
      #                   en: "Heads up."
      #                   thenText: "Nice! You know your stuff. I trust you to use this quantum computer."
      #                   set: ['passed.second.circuit.quiz']
      #               - text:
      #                   en: "Superposition."
      #                   thenText: "Hmm, not quite." 
      # - cond: 'visit.computer.center & learn.about.gates & passed.gate.quiz & passed.circuit.quiz & passed.second.circuit.quiz'
      #   prompt:
      #     en: "Tell the student you have a solution for their frozen simulation."
      #   target: citizenBraid
      #   dialogues:
      #     citizenBraid:
      #       - type: sequence
      #         items:
      #           - text:
      #               en: "You're back! What did you learn?"
      #             responses:
      #               - text:
      #                   en: "A magic trick."
      #                 thenText:
      #                   en: "Oh, ok, but my simulation is still frozen..."
      #               - text:
      #                   en: "A quantum computer can more efficiently simulate a quantum system."
      #                   then: final-offer
      #       - id: final-offer
      #         type: sequence
      #         items:
      #           - text:
      #               en: "That makes sense, how can I use one?"
      #             responses:
      #               - text:
      #                   en: "I can go with you tomorrow afternoon. I learned all about building quantum circuits."
      #                   set: ['quest.simulation.done']
      #               - text:
      #                   en: "There is a wise wizard in the forest who can teach you."
      #                   set: ['quest.simulation.done']
  cafe:
    npc: robot
    mood: exclamation
    available:
      dialogue:
        - type: sequence
          items:
            - text:
                en: "Welcome to our cafe, we have lots of tasty croissants. We only accept QCards for payment. I see you don't have one, would you like to get one to pay for your croissant?"
              responses:
                - text:
                    en: "Yes, I want a QCard, where can I get one?"
                  thenText:
                    en: "Go to the bank on the corner, they will help you."
                  set: [ 'quest.cafe.active' ]
                - text:
                    en: "I'm not hungry, thank you."
                  thenText:
                    en: "Ok, have a nice day."
    stages:
      - cond: '^got.qcard'
        prompt:
          en: "Get a QCard from the bank."
        dialogues:
          citizenPuan:
            - type: sequence
              items:
                - text:
                    en: "Welcome to the bank. I can help with getting a QCard, this payment system was built when classical encryption was broken by Quantum Computing."
                  responses:
                    - text:
                        en: "What is encryption?"
                      then: encryption
                    - text:
                        en: "What is quantum computing?"
                      then: quantum
                    - text:
                        en: "Ok, can I have one?"
                      thenText: "Yes, of course, but first you need to show me you understand the technology you're receiving."
                      then: quiz-quantum
            - id: encryption
              type: first
              items:
                - type: sequence
                  items:
                    - text:
                        en: "Imagine you want to send a letter to a friend, but you don’t want anyone else to read it. So, you use a special code to scramble the words."
                    - text:
                        en: "Your friend, who knows the secret code, can unscramble it and read the message. But if someone else tries to look at it, all they’ll see is nonsense."
                    - text:
                        en: "Computers do the same thing with data. They use mathematical formulas to turn information into a secret code. Only people (or computers) with the right “key” can unlock and read it. This keeps things like passwords, messages, and bank details safe from hackers!"
                    - text:
                        en: "What would you like to do now?"
                      responses: 
                        - text:
                            en: "What is Quantum Computing?"
                          then: quantum
                        - text:
                            en: "Can I have a QCard now?"
                          thenText: "Yes, of course, but first you need to show me you understand the technology you're receiving."
                          then: quiz-quantum
            - id: quantum
              type: first
              items:
                - type: sequence
                  items:
                    - text:
                        en: "Quantum computing uses quantum bits to perform calculations that traditional computers can't efficiently handle."
                    - text:
                        en: "Instead of regular bits (which can be either 0 or 1), quantum computers use qubits, which can be 0, 1, or both at the same time (thanks to superposition). They can also be entangled, meaning their states are connected no matter how far apart they are."
                    - text:
                        en: "This allows quantum computers to solve certain problems—like cracking codes or simulating molecules—way faster than classical computers. They’re still in early stages, but if they keep improving, they could revolutionize fields like medicine, AI, and cybersecurity!"
                    - text:
                        en: "What would you like to do now?"
                      responses: 
                        - text:
                            en: "What is Encryption?"
                          then: encryption
                        - text:
                            en: "Can I have a QCard now?"
                          thenText: "Yes, of course, but first you need to show me you understand the technology you're receiving."
                      then: quiz-quantum
            - id: quiz-quantum
              type: first
              items:
                - text:
                    en: "What is quantum computing?"
                  responses:
                    - text:
                        en: "When computers do calculations by jumping between parallel universes."
                      thenText: "Not quite... Try again."
                      then: quiz-quantum
                    - text:
                        en: "Using quantum bits to perform calculations that traditional computers can't efficiently handle."
                      thenText: "Nice! One more question."
                      then: quiz-encryption
                      set: [ 'completed.quiz.quantum' ]
                    - text:
                        en: "A way to keep things like passwords, messages, and bank details safe from hackers."
                      thenText: "That sounds like encryption... Try again."
                      then: quiz-quantum
            - id: quiz-encryption
              type: first
              items:
                - text:
                    en: "What is encryption?"
                  responses:
                    - text:
                        en: "When you write a message in really bad handwriting."
                      thenText: "Not quite... Try again."
                      then: quiz-encryption
                    - text:
                        en: "A way to keep things like passwords, messages, and bank details safe from hackers."
                      thenText: "Nice! Here's your QCard."
                      set: [ 'got.qcard' ]
                    - text:
                        en: "When you hide your files in a secret vault deep underground"
                      thenText: "Not quite... Try again."
                      then: quiz-encryption
      - cond: 'got.qcard'
        prompt:
          en: "Buy your croissant with a QCard."
        dialogues:
          robot:
            - text:
                en: "Congrats on getting your QCard. Here is your tasty croissant."
              set: ['quest.cafe.done', 'pnt.love.cafe']
  delivery:
    npc: citizenPunk
    mood: interrogation
    available:
      dialogue:
        - type: sequence
          items:
            - text:
                en: "We’ve got a premium express package for the apartment complex down the street that must be delivered today, but our staff all called in sick. Could you help me out, please? "
              responses:
                - text:
                    en: "Sure, I can help out."
                  thenText:
                    en: "Thank you so much! Just so you know, the package only has a name, and no apartment number, but I'm sure you can figure it out."
                  set: [ 'quest.delivery.active' ]
                - text:
                    en: "Sorry, I don’t think I can do this. I’m not in the delivery business."
                  thenText:
                    en: "I understand. We'll try to find someone else."
    stages:
      - cond: '^spoke.to.doorman & ^understood.grover.search & ^passed.grover.search.quiz'
        prompt:
          en: "Find the apartment complex."
        target: lawyer
        dialogues:
          lawyer:
            - type: sequence
              items:
                - text:
                    en: "Hey there. Delivering something? Just so you know, for the privacy of our residents, our mailboxes are labeled only by apartment numbers, not names."
                - text:
                    en: "Do you know which apartment you're delivering to?"
                  responses:
                    - text:
                        en: "The fanciest one."
                      thenText:
                        en: "I'm not sure which that is..."
                    - text:
                        en: "Oh no, I only have a name."
                      thenText:
                        en: "I have a special search program that matches names and numbers. I'll let you use it if you can tell me what it's called and how it works."
                      set: ['spoke.to.doorman']
      - cond: 'spoke.to.doorman & ^understood.grover.search & ^passed.grover.search.quiz'
        prompt:
          en: "Find out what kind of search algorithm can help you deliver this package."
        target: citizenBlue
        dialogues:
          citizenBlue:
            - type: sequence
              items:
                - text:
                    en: "Hey there, you look stressed, can I help you?"
                  responses:
                    - text:
                        en: "Yes, can I get a back massage?"
                      thenText:
                        en: "Sadly, I don't have that capacity."
                    - text:
                        en: "Yes, I'm trying to learn about a search algorithm."
                      then: grover-explanation  
            - id: grover-explanation  
              type: sequence
              items:
                - text:
                   en: "Ah! Grover's search—what an exciting breakthrough. Imagine you're looking for a specific point in a huge space."
                - text:
                   en: "A classical computer would have to check many points one by one, like a taxi weaving through city streets."
                - text:
                   en: "But Grover's quantum algorithm can take a kind of 'shortcut,' exploring the space more efficiently—like a bird flying straight to its destination instead of following the roads."
                  set: [ 'understood.grover.search' ]
      - cond: 'spoke.to.doorman & understood.grover.search & ^passed.grover.search.quiz'
        prompt:
          en: "Prove your new knowledge to the doorman."
        target: lawyer
        dialogues:
          lawyer:
            - type: sequence
              items:
                - text:
                    en: "So, what kind of search do you think would be most effective?"
                  responses:
                    - text:
                        en: "A smart dog sniffing the package and leading us the right way."
                      thenText:
                        en: "I like this idea, can you find a dog nearby?"
                    - text:
                        en: "Shouting the name very loud."
                      thenText:
                        en: "...please don't, my ears are very sensitive."
                    - text:
                        en: "A quantum algorithm called Grover's Search"
                      then: quiz-grover
            - id: quiz-grover
              type: first
              items:
                - text:
                    en: "Oooh, sounds like you did your research, can you tell me how it works?"
                  responses:
                    - text:
                        en: "It checks every option simultaneously."
                      thenText:
                        en: "A lot of people think that! But it actually works a little differently..."
                        then: quiz-grover
                    - text:
                        en: "It takes a shorter path through the state space than a classical computer."
                      thenText:
                        en: "Nice! I'll run the search for you now. The recipient of your package should come down in a second."
                      set: [ 'passed.grover.search.quiz' ]
      - cond: 'spoke.to.doorman & understood.grover.search & passed.grover.search.quiz'
        prompt:
          en: "Deliver the package!"
        target: citizenBraid
        dialogues:
          citizenBraid:
            - type: sequence
              items:
                - text:
                    en: "I hear you have a package for me! I'm quite excited to open it, because it's entangled with a package my friend has."
                - text:
                    en: "Do you know what entanglement is?"
                  responses:
                    - text:
                        en: "When a ball of yarn has lots of knots in it."
                      thenText:
                        en: "Haha, I hope that's not what's in my box..."
                    - text:
                        en: "When the states of two objects are connected, even when separated by vast distances."
                      thenText:
                        en: "You really know your stuff! Exactly right, when I open this box, I'll instantly know something about what's in my friend's box. Thanks for your help!"
                      set: [ 'quest.delivery.done' ]
ending:
  dialogue:
    - type: sequence
      items:
        - cond: 'COUNT("op.favor") >= 3'
          class: 'citizensEmpowered'
          type: sequence
          items:
            - text:
                en: 'You found out about three types of mathematical research data. :love:'
        - cond: 'COUNT("op.favor") < 3'
          type: sequence
          items:
            - text:
                en: "You did not answer Felicia's questions."
        - cond: 'quest.cafe.done'
          class: 'citizensEmpowered'
          type: sequence
          items:
            - text:
                en: 'You created an ORCID iD and a Zenodo account. :love:'
        - cond: '^found.cafe.orcid & ^found.cafe.zenodo'
          type: sequence
          items:
            - text:
                en: "You did not complete Muhammad's quest."
        - cond: 'found.cafe.orcid & ^found.cafe.zenodo'
          class: 'citizensEmpowered'
          type: sequence
          items:
            - text:
                en: "You created an ORCID iD but not a Zenodo account."
        - cond: 'quest.delivery.done'
          class: 'citizensEmpowered'
          type: sequence
          items:
            - text:
                en: "You helped Carla to get the code from Muhammad. :love:"
        - cond: '^quest.delivery.done'
          type: sequence
          items:
            - text:
                en: "You did not complete Carla's quest."
        - cond: 'COUNT("op.quest") = 0'
          type: sequence
          items:
            - text:
                en: "You did not complete any of the three quests. Try again!"
        - cond: 'COUNT("op.quest") = 1'
          type: sequence
          items:
            - text:
                en: "You completed one of the three quests :love:."
        - cond: 'COUNT("op.quest") = 2'
          type: sequence
          items:
            - text:
                en: "You completed two of the three quests :love::love:."
        - cond: 'COUNT("op.quest") = 3'
          type: sequence
          items:
            - text:
                en: "Congratulations, you completed all of the three quests! :love::love::love:"
        - cond: 'COUNT("op.love") = 0'
          text:
            en: "You didn't find any of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 1'
          text:
            en: "You found one of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 2'
          text:
            en: "You found two of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 3'
          text:
            en: "You found three of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 4'
          text:
            en: "You found four of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 5'
          text:
            en: "You found five of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 6'
          text:
            en: "You found six of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 7'
          text:
            en: "You found seven of the eight :love: hidden in the dialogues."
        - cond: 'COUNT("op.love") = 8'
          text:
            en: "You found all of the eight :love: hidden in the dialogues."
